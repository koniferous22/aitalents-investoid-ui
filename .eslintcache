[{"/Users/melkos01/Documents/aitalents-investoid-ui/src/index.tsx":"1","/Users/melkos01/Documents/aitalents-investoid-ui/src/App.tsx":"2","/Users/melkos01/Documents/aitalents-investoid-ui/src/pages/NewsHeadlinePage.tsx":"3","/Users/melkos01/Documents/aitalents-investoid-ui/src/config.tsx":"4","/Users/melkos01/Documents/aitalents-investoid-ui/src/pages/SearchPage.tsx":"5","/Users/melkos01/Documents/aitalents-investoid-ui/src/pages/ResultsPage.tsx":"6","/Users/melkos01/Documents/aitalents-investoid-ui/src/components/CompanySearch.tsx":"7","/Users/melkos01/Documents/aitalents-investoid-ui/src/components/Prediction.tsx":"8","/Users/melkos01/Documents/aitalents-investoid-ui/src/components/DonutChart.tsx":"9"},{"size":223,"mtime":1609525497116,"results":"10","hashOfConfig":"11"},{"size":1618,"mtime":1609714342759,"results":"12","hashOfConfig":"11"},{"size":3298,"mtime":1609709602236,"results":"13","hashOfConfig":"11"},{"size":111,"mtime":1609678291755,"results":"14","hashOfConfig":"11"},{"size":154,"mtime":1609708885262,"results":"15","hashOfConfig":"11"},{"size":6429,"mtime":1609713979163,"results":"16","hashOfConfig":"11"},{"size":3462,"mtime":1609714137261,"results":"17","hashOfConfig":"11"},{"size":1835,"mtime":1609711725956,"results":"18","hashOfConfig":"11"},{"size":2296,"mtime":1609711819743,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"r6zzti",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/melkos01/Documents/aitalents-investoid-ui/src/index.tsx",[],["42","43"],"/Users/melkos01/Documents/aitalents-investoid-ui/src/App.tsx",["44"],"/Users/melkos01/Documents/aitalents-investoid-ui/src/pages/NewsHeadlinePage.tsx",["45"],"import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components';\nimport debounce from 'lodash.debounce'\nimport { appConfig } from '../config';\nimport { Prediction } from '../components/Prediction';\n\ntype Mode = 'DAY' | 'WEEK'\n\nconst PageWrapper = styled.div`\n  text-align: center;\n`;\n\nconst RadioForm = styled.div`\n  margin-top: 10%;\n`;\n\nconst RadioBox = styled.input`\n  width: 20px;\n`;\n\nconst Title = styled.div`\n  font-family: 'Nunito Sans', sans-serif;\n  font-size: 30px;\n`;\n\nconst Label = styled.label`\n  font-family: 'Nunito Sans', sans-serif;\n  font-size: 20px;\n`;\n\nconst EnterText = styled.div`\n  margin-top: 40px;\n  font-family: 'Nunito Sans', sans-serif;\n  font-size: 35px;\n`;\n\nconst Input = styled.input`\n  max-width: 650px;\n  width: 100%;\n  font-size: 30px;\n  border-radius: 5px;\n`;\n\nconst getEndpointByMode = (mode: Mode) => {\n  switch (mode) {\n    case 'DAY':\n      return 'predict_day'\n    case 'WEEK':\n      return 'predict_week'\n  }\n}\n\ntype ClassifierResponse = {\n  class: 1 | 0;\n  logits: [number, number];\n  softmax: [number, number];\n}\n\nexport const NewsHeadlinePage = () => {\n  const [\n    recommendation,\n    setRecommendation\n  ] = useState<ClassifierResponse | null>(null);\n  const [\n    isLoading,\n    setLoading\n  ] = useState(false);\n  const [\n    mode,\n    setMode\n  ] = useState<Mode>('DAY');\n  const [\n    headline,\n    setHeadline\n  ] = useState('');\n  const callApi = useCallback(debounce((text: string, mode: Mode) => {\n    if (!text || text === '') {\n      setRecommendation(null)\n    }\n    fetch(\n      `${appConfig.apiUrl}/${getEndpointByMode(mode)}/${encodeURIComponent(text)}`, \n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    ).then((res) => res.json())\n    .then((data) => setRecommendation(data))\n    .finally(() => setLoading(false))\n  }, appConfig.debounceTime), [])\n  return (\n    <PageWrapper>\n      <RadioForm>\n        <Title>\n          Predicting stock change after\n        </Title>\n        <Label>\n          <RadioBox\n            type={'radio'}\n            value={'DAY'}\n            checked={mode === 'DAY'}\n            onChange={(e) => {\n              setMode(e.target.value as Mode)\n              callApi(headline, e.target.value as Mode)\n            }}\n          />\n          1 day\n        </Label>\n        <Label>\n          <RadioBox\n            type={'radio'}\n            value={'WEEK'}\n            checked={mode === 'WEEK'}\n            onChange={(e) => {\n              setMode(e.target.value as Mode)\n              callApi(headline, e.target.value as Mode);\n            }}\n          />\n          1 week\n        </Label>\n      </RadioForm>\n      <div>\n        <EnterText>\n          Enter example news headline:\n        </EnterText>\n        <Input type={'text'} onChange={(e) => {\n          setHeadline(e.target.value)\n          if (e.target.value.length > 0) {\n            setLoading(true)\n          }\n          callApi(e.target.value, mode)\n        }}/>\n        { isLoading && (\n            <div>\n              Predicting\n            </div>\n          )\n        }\n        { recommendation && <Prediction size={'LARGE'} justifyItems={'center'} title={headline} predictedClass={recommendation.class} softmax={recommendation.softmax} />}\n      </div>\n    </PageWrapper>\n  )\n}","/Users/melkos01/Documents/aitalents-investoid-ui/src/config.tsx",[],"/Users/melkos01/Documents/aitalents-investoid-ui/src/pages/SearchPage.tsx",[],"/Users/melkos01/Documents/aitalents-investoid-ui/src/pages/ResultsPage.tsx",["46","47","48","49"],"import React, { useCallback, useEffect, useState } from 'react'\nimport styled from 'styled-components';\nimport { useLocation } from 'react-router-dom';\n// @ts-expect-error\nimport { parse } from 'query-string';\nimport { appConfig } from '../config';\n// @ts-expect-error\nimport { stringify } from 'query-string'\nimport { Prediction } from '../components/Prediction';\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useInView } from 'react-intersection-observer';\n\ntype Mode = 'DAY' | 'WEEK'\n\nconst getEndpointByMode = (mode: Mode) => {\n  switch (mode) {\n    case 'DAY':\n      return 'results_day'\n    case 'WEEK':\n      return 'results_week'\n  }\n}\n\ntype SearchResultResponse = {\n  class: 1 | 0;\n  logits: [number, number];\n  softmax: [number, number];\n  entity: string;\n  foundBy: string;\n  stockLabel: string;\n  text: string;\n  title: string;\n};\n\nconst EntryTop = styled.div`\n  font-size: 30px;\n  font-family: 'Nunito Sans', sans-serif;\n  i {\n    font-size: 20px;\n  }\n`;\n\nconst CollapseDiv = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  i {\n    font-family: 'Nunito Sans', sans-serif;\n  }\n`;\n\nconst TextDiv = styled.div`\n  width: 70vw;\n  font-family: 'Raleway', sans-serif;\n`\n\nconst Entry = ({ stockLabel, entity, foundBy, title, text, class: class_, softmax, isLast, onLoad }: SearchResultResponse & { isLast: boolean; onLoad: () => void }) => {\n  const { ref, inView, entry } = useInView({\n    /* Optional options */\n    threshold: 0.1,\n  });\n  const [\n    isTextOpen,\n    setTextOpen\n  ] = useState(false);\n  useEffect(() => {\n    if (entry?.isIntersecting) {\n      onLoad();\n    }\n  }, [entry?.isIntersecting]);\n  return (\n    <div ref={isLast ? ref : null}>\n      <EntryTop>\n        <strong>{`[${stockLabel}] `}</strong>\n        <span>{entity}</span>\n        <i>{` (Found by phrase: '${foundBy}')`}</i>\n      </EntryTop>\n      <Prediction justifyItems={'space-between'} size={'SMALL'} title={title} predictedClass={class_} softmax={softmax} />\n      { !isTextOpen && (\n        <CollapseDiv onClick={() => setTextOpen(true)}>\n          <i>{`Click here to display text  `}</i>\n          <FontAwesomeIcon icon={faArrowDown} size={'2x'} />\n        </CollapseDiv>\n      )}\n      { isTextOpen && (\n        <>\n          <FontAwesomeIcon icon={faArrowUp} size={'3x'} onClick={() => setTextOpen(false)} />\n          <TextDiv>\n            {text}\n          </TextDiv>\n        </>\n      )}\n      <hr />\n    </div>\n  )\n};\n\ntype ResponsePool = Record<\n  Mode,\n  {\n    pageCount: number;\n    data: Array<Array<SearchResultResponse>>;\n  }\n>\nconst RadioForm = styled.div`\n  margin-top: 30px;\n  margin-bottom: 60px;\n`;\n\nconst RadioBox = styled.input`\n  width: 20px;\n`;\n\nconst Title = styled.div`\n  font-family: 'Nunito Sans', sans-serif;\n  font-size: 30px;\n`;\n\nconst Label = styled.label`\n  font-family: 'Nunito Sans', sans-serif;\n  font-size: 20px;\n`;\n\nconst PageWrapper = styled.div`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const ResultsPage = () => {\n  const location = useLocation();\n  const [\n    mode,\n    setMode\n  ] = useState<Mode>('DAY');\n  const [\n    entries,\n    setEntries\n  ] = useState<ResponsePool>({\n        'DAY': {\n          data: [],\n          pageCount: 0\n        },\n        'WEEK': {\n          data: [],\n          pageCount: 0\n        },\n      })\n  // TODO type inference with query-string doesn't work, issues with installing @types/query-string\n  const callSearchResults = useCallback((text: string) =>\n    fetch(\n      `${appConfig.apiUrl}/search/${encodeURIComponent(text)}`, \n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    ).then((res) => res.json())\n    .then((data) => setIds(data['found_ids']))\n    .finally(() => setLoading(false)),\n    []\n  )\n  const callArticles = useCallback((ids: string[], mode: Mode, page: number) =>\n    fetch(\n      `${appConfig.apiUrl}/${getEndpointByMode(mode)}?${stringify({ id: ids, page })}`, \n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    ).then((res) => res.json())\n    .then(({ pageCount, data }: { pageCount: number, data: Array<SearchResultResponse>}) => setEntries((prevEntries) => ({\n      ...prevEntries,\n      [mode]: {\n        pageCount,\n        data: [...prevEntries[mode].data, data ]\n      }\n    })))\n    .finally(() => setLoading(false)),\n    []\n  )\n  const { id, search }: { id: string; search: string} = parse(location.search);\n  const [\n    isLoading,\n    setLoading\n  ] = useState(false)\n  const [\n    ids,\n    setIds\n  ] = useState<null | string[]>(null)\n  const [\n    error,\n    setError\n  ] = useState<null | string>(null)\n  useEffect(() => {\n    if (id && id.length > 0) {\n      setIds([id])\n    }\n    else if (search && search.length > 0) {\n      setLoading(true);\n      callSearchResults(search)\n    } else {\n      setError('No input received');\n    }\n  }, [id, search])\n  useEffect(() => {\n    if (ids) {\n      callArticles(ids, mode, 1)\n    }\n  }, [ids, mode])\n  if (error) {\n    return <div>{error}</div>\n  }\n  if (isLoading) {\n    return <div>Loading</div>\n  }\n  return (\n    <PageWrapper>\n      <RadioForm>\n        <Title>\n          Predicting stock change after\n        </Title>\n        <Label>\n          <RadioBox\n            type={'radio'}\n            value={'DAY'}\n            checked={mode === 'DAY'}\n            onChange={(e) => setMode(e.target.value as Mode)}\n          />\n          1 day\n        </Label>\n        <Label>\n          <RadioBox\n            type={'radio'}\n            value={'WEEK'}\n            checked={mode === 'WEEK'}\n            onChange={(e) => setMode(e.target.value as Mode)}\n          />\n          1 week\n        </Label>\n      </RadioForm>\n      <div>\n        {\n          ids && entries && entries[mode].data.map((entryPage, pageIndex) => (\n            <div key={pageIndex}>\n              {\n                entryPage.map((entry, index) => (\n                  <Entry\n                    {...entry}\n                    isLast={pageIndex === entries[mode].data.length - 1 && index === entryPage.length - 1}\n                    onLoad={() => callArticles(ids, mode, entries[mode].data.length)}\n                  />\n                ))\n              }\n            </div>\n          ))\n        }\n      </div>\n    </PageWrapper>\n  )\n};\n","/Users/melkos01/Documents/aitalents-investoid-ui/src/components/CompanySearch.tsx",["50"],"import debounce from 'lodash.debounce';\nimport styled, { css } from 'styled-components';\nimport React, { useCallback, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { appConfig } from '../config';\n// @ts-expect-error\nimport { stringify } from 'query-string';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ntype Size = 'SMALL' | 'LARGE'\n\nconst SearchWrapper = styled.div`\n  display: flex;\n  margin-top: 20px;\n  margin-left: 33vw;\n  align-items: center;\n  width: 67vw;\n`;\n\nconst SearchInput = styled.input<{ fontSize: Size }>`\n  max-width: 650px;\n  width: 34vw;\n  ${({ fontSize }) => fontSize === 'SMALL'\n  ? css`\n    font-size: 20px;\n  `\n  : css`\n    font-size: 30px;\n  `}\n  border-radius: 5px;\n`;\n\nconst SuggestionsWrapper = styled.div`\n  position: absolute;\n  text-align: left;\n  left: 0px;\n  margin-left: 33vw;\n  padding: 5px;\n  border: 2px solid;\n  border-radius: 5px;\n  max-width: 650px;\n  width: 33vw;\n`;\n\nconst SearchIcon = styled(FontAwesomeIcon)`\n  margin-left: 10px;\n  padding: 5px;\n  border: 3px solid;\n  border-radius: 5px;\n  &:hover {\n    cursor:pointer;\n  }\n`;\n\nconst SearchLinkWrapper = styled.div`\n  &:hover {\n    background-color: #CCCCCC;\n  }\n`;\n\nconst SearchLink = styled.div`\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n    cursor:pointer;\n  }\n`\n\nconst LoadingWrapper = styled.div`\n  margin-left: 10px;\n`;\n\ntype Props = {\n  size: Size;\n}\n\nexport const CompanySearch = ({ size }: Props) => {\n  const [\n    searchInput,\n    setSearchInput\n  ] = useState('');\n  const [\n    isLoading,\n    setLoading\n  ] = useState(false);\n  const [\n    suggestions,\n    setSuggestions,\n  ] = useState<null | Array<{ id: string; suggestion: string}>>(null)\n  const history = useHistory();\n  const callSaytApi = useCallback(debounce((text: string) => {\n    if (!text || text === '') {\n      setSuggestions(null);\n    }\n    fetch(\n      `${appConfig.apiUrl}/sayt/${encodeURIComponent(text)}`, \n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    ).then((res) => res.json())\n    .then((data) => {\n      setSuggestions(data['found_companies'])\n      setTimeout(() => setSuggestions(null), 4000)\n    })\n    .finally(() => setLoading(false))\n  }, appConfig.debounceTime), [])\n  return (\n    <div>\n      <SearchWrapper>\n        <SearchInput\n          type={'text'}\n          fontSize={size}\n          onChange={(e) => {\n            setSearchInput(e.target.value)\n            if (e.target.value.length > 0) {\n              setLoading(true)\n            }\n            callSaytApi(e.target.value)\n          }}\n        />\n        <SearchIcon size={size === 'LARGE' ? '2x' : '1x'} icon={faSearch} onClick={() => history.push(`/results?${stringify({ search: searchInput })}`)} />\n        { isLoading === true && <LoadingWrapper>Loading</LoadingWrapper>}\n      </SearchWrapper>\n      { suggestions && (\n        <SuggestionsWrapper>\n          { suggestions.length > 0 && suggestions.map(({ id, suggestion }) => (\n                <SearchLinkWrapper key={id} onClick={() => history.push(`/results?${stringify({ id })}`)} >\n                  <SearchLink>{suggestion}</SearchLink>\n                </SearchLinkWrapper>\n              ))\n          }\n          { suggestions && suggestions.length === 0 && !isLoading && <div>No results found</div> }\n        </SuggestionsWrapper>\n      )}\n    </div>\n  )\n};\n","/Users/melkos01/Documents/aitalents-investoid-ui/src/components/Prediction.tsx",[],"/Users/melkos01/Documents/aitalents-investoid-ui/src/components/DonutChart.tsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":33,"column":5,"nodeType":"57","endLine":33,"endColumn":26},{"ruleId":"58","severity":1,"message":"59","line":76,"column":19,"nodeType":"60","endLine":76,"endColumn":30},{"ruleId":"61","severity":1,"message":"62","line":59,"column":16,"nodeType":"60","messageId":"63","endLine":59,"endColumn":22},{"ruleId":"58","severity":1,"message":"64","line":71,"column":6,"nodeType":"65","endLine":71,"endColumn":29,"suggestions":"66"},{"ruleId":"58","severity":1,"message":"67","line":207,"column":6,"nodeType":"65","endLine":207,"endColumn":18,"suggestions":"68"},{"ruleId":"58","severity":1,"message":"69","line":212,"column":6,"nodeType":"65","endLine":212,"endColumn":17,"suggestions":"70"},{"ruleId":"58","severity":1,"message":"59","line":92,"column":23,"nodeType":"60","endLine":92,"endColumn":34},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","@typescript-eslint/no-unused-vars","'inView' is assigned a value but never used.","unusedVar","React Hook useEffect has a missing dependency: 'onLoad'. Either include it or remove the dependency array. If 'onLoad' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["73"],"React Hook useEffect has a missing dependency: 'callSearchResults'. Either include it or remove the dependency array.",["74"],"React Hook useEffect has a missing dependency: 'callArticles'. Either include it or remove the dependency array.",["75"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [entry?.isIntersecting, onLoad]",{"range":"82","text":"83"},"Update the dependencies array to be: [callSearchResults, id, search]",{"range":"84","text":"85"},"Update the dependencies array to be: [callArticles, ids, mode]",{"range":"86","text":"87"},[1730,1753],"[entry?.isIntersecting, onLoad]",[5024,5036],"[callSearchResults, id, search]",[5117,5128],"[callArticles, ids, mode]"]